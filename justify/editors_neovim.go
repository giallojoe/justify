package justify

import (
	"embed"
	"errors"
	"os"
	"path/filepath"
)

// ===== embed the global client Lua =====

//go:embed assets/justify_client.lua
var neovimClientFS embed.FS

// NeovimClientLua returns the embedded global client as a string.
func NeovimClientLua() string {
	b, _ := neovimClientFS.ReadFile("assets/justify_client.lua")
	return string(b)
}

// WriteNeovimClient writes the embedded global client to a path.
// If out == "" or "-", it writes to stdout. If !force and file exists, returns an error.
func WriteNeovimClient(out string, force bool) error {
	code, err := neovimClientFS.ReadFile("assets/justify_client.lua")
	if err != nil {
		return err
	}
	if out == "" || out == "-" {
		_, err := os.Stdout.Write(code)
		return err
	}
	if err := os.MkdirAll(filepath.Dir(out), 0o755); err != nil {
		return err
	}
	if !force {
		if _, err := os.Stat(out); err == nil {
			return errors.New(out + " exists (use --force)")
		}
	}
	return os.WriteFile(out, code, 0o644)
}

// ===== (optional) project-local generator stays as-is =====

// GenerateNeovim creates a project-local `.justify/dap.lua` (lightweight wrapper).
// You can keep your previous implementation here, or remove it if you only use the global client.
func GenerateNeovim(root string, _ []Target, force bool) error {
	dir := filepath.Join(root, ".justify")
	if err := os.MkdirAll(dir, 0o755); err != nil {
		return err
	}
	dst := filepath.Join(dir, "dap.lua")
	if !force {
		if _, err := os.Stat(dst); err == nil {
			return errors.New(dst + " exists (use --force)")
		}
	}
	// Minimal loader that calls the global justify_client if present,
	// otherwise instructs the user to generate it.
	const loader = `-- auto-generated by justify
local ok, client = pcall(require, "justify_client")
if ok and client and client.setup_commands then
  client.setup_commands()
else
  vim.notify("[justify] Install global client via: justify editor --editor neovim-global", vim.log.levels.WARN)
end
`
	return os.WriteFile(dst, []byte(loader), 0o644)
}
