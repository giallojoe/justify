set shell := ["bash","-eu","-o","pipefail","-c"]

# ---------- C/C++ Justfile ----------
# Prefers CMake; falls back to Make
build:
    if [ -f CMakeLists.txt ]; then \
      cmake -S . -B build && cmake --build build; \
    elif [ -f Makefile ]; then \
      make; \
    else \
      echo "No CMakeLists.txt or Makefile found" >&2; exit 1; \
    fi

run:
    if [ -x build/app ]; then ./build/app; \
    elif [ -x build/main ]; then ./build/main; \
    elif [ -x ./app ]; then ./app; \
    elif [ -x ./main ]; then ./main; \
    else echo "Adjust the run target for your binary path"; fi

test:
    if [ -d build ]; then ctest --test-dir build || true; \
    elif [ -f Makefile ]; then make test || true; fi

clean:
    if [ -d build ]; then rm -rf build; fi

# Prints the path of the primary executable to run
program:
    @bash -eu -o pipefail -c '
for p in build/app build/main ./app ./main; do
  if [ -x "$p" ]; then echo "$p"; exit 0; fi
done
# otherwise: pick newest executable under build/
if [ -d build ]; then
  P=$(find build -type f -perm -111 -printf "%T@ %p\n" 2>/dev/null | sort -nr | head -n1 | cut -d" " -f2-)
  if [ -n "$P" ]; then echo "$P"; exit 0; fi
fi
echo "build"
'

write-program-env:
    @mkdir -p .vscode
    @P="$$(just -q program)"; printf "PROGRAM=%s\nPROGRAM_KIND=cpp\n" "$$P" > .vscode/.program.env
    @echo "Wrote .vscode/.program.env"
